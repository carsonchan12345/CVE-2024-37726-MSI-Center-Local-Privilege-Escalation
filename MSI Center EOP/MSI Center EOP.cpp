#include <Windows.h>
#include <Shlwapi.h>
#include <WtsApi32.h>
#include <Msi.h>
#include <PathCch.h>
#include <AclAPI.h>
#include <iostream>
#include "resource.h"
#include "def.h"
#include <stdio.h>
#include <tchar.h>
#include <Windows.h>
#include <comdef.h>

#pragma comment(lib, "Msi.lib")
#pragma comment(lib, "Shlwapi.lib")
#pragma comment(lib, "wtsapi32")
#pragma comment(lib, "PathCch.lib")
#pragma comment(lib, "rpcrt4.lib")
#pragma warning(disable:4996)

BOOL Move(HANDLE hFile);
HANDLE h;
void load();
int main()
{
    std::cout << "Hello World!\n";
	h = CreateFile(L"C:\\Users\\User\\Desktop\\eop\\test.txt", GENERIC_READ | DELETE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);


	if (!Move(h)) {
		printf("[!] Failed to move file!\n");
		exit(1);
	}
	printf("[+] File moved!\n");
	//if (oplock != nullptr)
	//{
	//	oplock->WaitForLock(INFINITE);

	//	delete oplock;
	//}
	//else
	//{
	//	printf("Error creating oplock\n");
	//	return 1;
	//}
}
void load() {
	HMODULE ntdll = LoadLibraryW(L"ntdll.dll");
	if (ntdll != NULL) {
		pRtlInitUnicodeString = (_RtlInitUnicodeString)GetProcAddress(ntdll, "RtlInitUnicodeString");
		pNtCreateFile = (_NtCreateFile)GetProcAddress(ntdll, "NtCreateFile");
		pNtSetInformationFile = (_NtSetInformationFile)GetProcAddress(ntdll, "NtSetInformationFile");

	}
	if (pRtlInitUnicodeString == NULL || pNtCreateFile == NULL) {
		printf("Cannot load api's %d\n", GetLastError());
		exit(0);
	}
}
BOOL Move(HANDLE hFile) {
	printf("[!] bp1!\n");
	if (hFile == INVALID_HANDLE_VALUE) {
		printf("[!] Invalid handle!\n");
		return FALSE;
	}
	printf("[!] bp2!\n");
	wchar_t tmpfile[MAX_PATH] = { 0x0 };
	printf("[!] bp3!\n");
	RPC_WSTR str_uuid;
	UUID uuid = { 0 };
	UuidCreate(&uuid);
	UuidToString(&uuid, &str_uuid);
	_swprintf(tmpfile, L"\\??\\C:\\windows\\temp\\%s", str_uuid);
	printf("[!] bp4!\n");
	size_t buffer_sz = sizeof(FILE_RENAME_INFO) + (wcslen(tmpfile) * sizeof(wchar_t));
	printf("[!] bp5!\n");
	FILE_RENAME_INFO* rename_info = (FILE_RENAME_INFO*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY | HEAP_GENERATE_EXCEPTIONS, buffer_sz);
	printf("[!] bp6!\n");
	IO_STATUS_BLOCK io = { 0 };
	printf("[!] bp7!\n");
	rename_info->ReplaceIfExists = TRUE;
	printf("[!] bp8!\n");
	rename_info->RootDirectory = NULL;
	printf("[!] bp9!\n");
	rename_info->Flags = 0x00000001 | 0x00000002 | 0x00000040;
	printf("[!] bp10!\n");
	rename_info->FileNameLength = wcslen(tmpfile) * sizeof(wchar_t);
	printf("[!] bp11!\n");
	memcpy(&rename_info->FileName[0], tmpfile, wcslen(tmpfile) * sizeof(wchar_t));
	printf("[!] bp12!\n");
	NTSTATUS status = pNtSetInformationFile(hFile, &io, rename_info, buffer_sz, 65);
	printf("[!] bp13!\n");
	if (status != 0) {
		return FALSE;
	}
	return TRUE;
}
